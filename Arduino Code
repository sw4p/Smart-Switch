/*
 * written by - Swapnil Verma
 * 11/09/2016, sunday
 */
 
char Rec_Data = 0;
int msg_flg = 0;
byte msg_flag_2 = 0;
byte call_flag = 0;
byte reply_flag = 0;
byte delete_flag = 0;
byte d_count = 0;
byte i = 0;
byte j = 0;
char number[15];
char message[160];

const int light = 13;

void modem_initialization();
void clear_rx_buffer();
void command_match();
void gsm_read_message();

void setup()
{
  delay(1000);
  Serial.begin(9600);//start serial port at baud rate of 9600
  Serial1.begin(9600);//start serial port at baud rate of 9600
  
  modem_initialization();
  pinMode(light, OUTPUT);
  digitalWrite(light, LOW);
}

void loop()
{
  gsm_read_message();//wait for message or call
  if ( reply_flag == 1 ) //only if valid message received
  {
    command_match();
    reply_flag = 0;
  }
}

/**********************************************************************************************************************************************************************************
***********************************************************************************************************************************************************************************

Function Name : COMMAND_MATCH
Function used to match and execute commands given by user

***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
void command_match(void)
{
  if ((strcmp(message, "on") == 0) || (strcmp(message, "ON") == 0))
  {
    digitalWrite(light, HIGH);
    delay(50);
  }
  else if ((strcmp(message, "off") == 0) || (strcmp(message, "OFF") == 0))
  {
    digitalWrite(light, LOW);
    delay(50);  
  }
 /* else if ((strcmp(message, "stop") == 0) || (strcmp(message, "STOP") == 0))
  {
    digitalWrite(7, LOW);
    delay(50);
  }*/
}
/*******************************************************************************************
*******************************************************************************************

Function Name : MODEM_INITIALIZATION
Function used to initialize GSM module

*******************************************************************************************
*******************************************************************************************/
void modem_initialization()
{
  char rec_data;
  byte network_status = 0 ;//network_status initialized as zero
  byte status_check = 0 ;//status_check initialized as zero
  byte gsm_cnt = 0;//gsm_cnt initialized as zero
  byte ok_flag = 0; //ok_flag initialized as zero
  byte count = 0; //count initialized as zero
  clear_rx_buffer();//clearing receiving buffer
  while (gsm_cnt < 5) // repeat entire loop until gsm_cnt less than seven
  {
    switch (gsm_cnt)
    {
      case 0: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("AT");// Attention command to wake up GSM modem
        delay(1000);
        break;
      case 1: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("ATE0");//Command for disable echo
        delay(1000);
        break;
      case 2: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("ATV0");// Command for numeric response after this '0'(zero) will be recieved instead of "OK"
        delay(1000);
        break;
      case 3: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("AT&W");// Command TO SAVE SETTINGS
        delay(1000);
        break;
      case 4: gsm_cnt = 5;// exit from the loop
        break;
      default : break;
    }
    while (Serial1.available() > 0)
    {
      rec_data = Serial1.read();
      if (rec_data == 'O' ) // 'o' is recieved
        ok_flag = 1;
      else if (ok_flag == 1 && rec_data == 'K' ) // 'K' is recieved
      {
        gsm_cnt ++;
        ok_flag = 0;
      }
      else if (rec_data == '0' )// '0'(zero) is recieved (numeric response)
      {
        gsm_cnt ++;
        ok_flag = 0;
      }
      else if (rec_data == '+' )// '+' is recieved message
      {
        clear_rx_buffer();//clearing receiving buffer

        if ( gsm_cnt > 0 )
          gsm_cnt --;
      }
    }
  }
  gsm_cnt = 0;
  ok_flag = 0;
  while (network_status == 0 ) //wait for PIN READY
  {
    if (status_check == 0 )
    {
      delay(1000);
      status_check = 1 ;
      clear_rx_buffer();//clearing receiving buffer
      Serial1.println("AT+CPIN?"); //checkin PIN return ready(+CPIN: READY) with a valid simcard otherwise error
    }
    while (Serial1.available() > 0)
    {
      rec_data = Serial1.read();
      if ( rec_data == '+' && status_check == 1 ) // '+' is recieved
        status_check = 2 ;
      else if ( rec_data == 'C' && status_check == 2 ) // 'C' is recieved
        status_check = 3 ;
      else if ( rec_data == 'P' && status_check == 3 ) // 'P' is recieved
        status_check = 4 ;
      else if ( rec_data == 'I' && status_check == 4 ) // 'I' is recieved
        status_check = 5 ;
      else if ( rec_data == 'N' && status_check == 5 ) // 'N' is recieved
        status_check = 6 ;
      else if ( rec_data == ':' && status_check == 6 ) // ':' is recieved
        status_check = 7 ;
      else if ( rec_data == ' ' && status_check == 7 ) // ' ' is recieved
        status_check = 8 ;
      else if ( rec_data == 'R' && status_check == 8 ) // 'R' is recieved
        status_check = 9 ;
      else if ( rec_data == 'E' && status_check == 9 ) // 'E' is recieved
        status_check = 10 ;
      else if ( rec_data == 'A' && status_check == 10 ) // 'A' is recieved
        status_check = 11 ;
      else if ( rec_data == 'D' && status_check == 11 ) // 'D' is recieved
        status_check = 12 ;
      else if ( rec_data == 'Y' && status_check == 12 ) // 'Y' is recieved
        status_check = 13 ;
      else if ( rec_data == 0X0D && status_check == 13 ) //Carriage return
        status_check = 14 ;
      else if ( rec_data == 0X0A && status_check == 14 ) //Line Feed
        status_check = 15 ;
      else if ( rec_data == '0' && status_check == 15 ) // '0' is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //goto next step
      }
      else if ( rec_data != 'R' && status_check == 8 ) //+CPIN: NOT READY
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 0; //repeat current step
      }
      else if ( rec_data == 'M' && status_check == 3 ) // in case of any message
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 0; //repeat current step
      }
    }
  }
  while (network_status == 1 ) //wait for SIM network registration
  {
    if (status_check == 0 )
    {
      delay(1000);
      status_check = 1 ;
      clear_rx_buffer();//clearing receiving buffer
      Serial1.println("AT+CREG?"); //checking for SIM card registration ,if registerd "+CREG: 0,1" will receive
    }
    while (Serial1.available() > 0)
    {
      rec_data = Serial1.read();
      if ( rec_data == '+' && status_check == 1 ) // '+' is recieved
        status_check = 2 ;
      else if ( rec_data == 'C' && status_check == 2 ) // 'C' is recieved
        status_check = 3 ;
      else if ( rec_data == 'R' && status_check == 3 ) // 'R' is recieved
        status_check = 4 ;
      else if ( rec_data == 'E' && status_check == 4 ) // 'E' is recieved
        status_check = 5 ;
      else if ( rec_data == 'G' && status_check == 5 ) // 'G' is recieved
        status_check = 6 ;
      else if ( rec_data == ':' && status_check == 6 ) // ':' is recieved
        status_check = 7 ;
      else if ( rec_data == ' ' && status_check == 7 ) // ' ' is recieved
        status_check = 8 ;
      else if ( rec_data == '0' && status_check == 8 ) // '0' is recieved
        status_check = 9 ;
      else if ( rec_data == ',' && status_check == 9 ) // ',' is recieved
        status_check = 10 ;
      else if ( rec_data == '1' && status_check == 10 ) // '1' is recieved
        status_check = 11 ;
      else if ( rec_data == 0X0D && status_check == 11 ) //Carriage return
        status_check = 12 ;
      else if ( rec_data == 0X0A && status_check == 12 ) //Line Feed
        status_check = 13 ;
      else if ( rec_data == '0' && status_check == 13 ) // '0' is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 2; //goto next step
      }
      else if ( rec_data != '1' && status_check == 10 ) // +CREG: 0,2 not registered
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //repeat current step
      }
      else if ( rec_data == 'M' && status_check == 3 ) // in case of any message
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //repeat current step
      }
    }
  }
  gsm_cnt = 0;
  while (gsm_cnt < 4) // repeat entire loop until gsm_cnt less than nine
  {
    switch (gsm_cnt)
    {
      case 0: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("AT+CMGF=1");// Attention command to wake up GSM modem
        delay(1000);
        break;
      case 1: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("AT+CNMI=2,1,0,0,0");//Command to configure new message indication
        delay(1000);
        break;
      case 2: clear_rx_buffer();//clearing receiving buffer
        Serial1.println("AT+CMGD=1,4");// Command to delete all received messages
        delay(1000);
        break;
      case 3: gsm_cnt = 4;// exit from the loop
        break;
      default : break;
    }
    while (Serial1.available() > 0)
    {
      rec_data = Serial1.read();
      if (rec_data == '0' )// '0'(zero) is recieved (numeric response)
      {
        gsm_cnt ++;
      }
      else if (rec_data == '+'  )// '+' recieved ,before "AT+CIICR" command,may be any message
      {
        clear_rx_buffer();//clearing receiving buffer
        if ( gsm_cnt > 0 )
          gsm_cnt --;
      }

      else if (rec_data == '4' && gsm_cnt > 2)// '4' recieved (error),in gprs initialisation commands
      {
        clear_rx_buffer();//clearing receiving buffer
        gsm_cnt = 4;
      }
    }
  }
  gsm_cnt = 0;
}

/**********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************

Function Name : GSM_READ_MESSAGE
Function used to read message from GSM moule (only if any message is available )

***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
void gsm_read_message(void)
{
  while (Serial1.available() > 0)
  {
    Rec_Data = Serial1.read();
    if ( Rec_Data == '+'  && msg_flg == 0 ) // '+' is recieved
      msg_flg = 1;
    else if ( Rec_Data == 'C' && msg_flg == 1 ) // 'C' is recieved
      msg_flg = 2;
    else if ( Rec_Data == 'M' && msg_flg == 2 ) // 'M' is recieved
      msg_flg = 3;
    else if ( Rec_Data == 'T' && msg_flg == 3 ) // 'T' is recieved
      msg_flg = 4;
    else if ( Rec_Data == 'I' && msg_flg == 4 ) // 'I' is recieved (INCOMING MESSAGE )
    {
      clear_rx_buffer();//clearing receiving buffer
      Rec_Data = 0;
      msg_flg = 0;
      delay(300);//Delay for GSM module become ready
      array_clear();//Clear both message and number arrays
      Serial1.println("AT+CMGR=1");//Command for message read from location one
      i = 0; j = 0;
    }
    else if ( Rec_Data == 'G' && msg_flg == 3 ) // 'G' is recieved
      msg_flg = 4;
    else if ( Rec_Data == 'R' && msg_flg == 4 ) // 'R' is recieved,Readind message
      msg_flg = 5;
    else if ( Rec_Data == ':' && msg_flg == 5 ) // ':' is recieved
      msg_flg = 6;
    else if ( Rec_Data == '"' && msg_flg == 6  ) // Counting double quotes
      d_count++;
    else if ( Rec_Data != '"' && d_count == 3 && msg_flg == 6) // Saving number to message array from between third and fourth double quotes
      number[i++] = Rec_Data;
    else if ( Rec_Data == 0X0D && msg_flg == 6) //Carriage return
      msg_flg = 7;
    else if ( Rec_Data == 0X0A && msg_flg == 7) //Line feed
      msg_flg = 8;
    else if ( Rec_Data == '*' && d_count >= 5 &&  msg_flg == 8 ) //Start symbol '*' is recieved
      msg_flag_2 = 1;
    else if ( Rec_Data != '#' && msg_flag_2 == 1 &&  msg_flg == 8 && Rec_Data != 0X0D && Rec_Data != 0X0A ) //Data between start and stop symbols were saved to message array
      message[j++] = Rec_Data;
    else if ( Rec_Data == '#' && msg_flag_2 == 1 &&  msg_flg == 8) //Stop symbol '#' is recieved
    {
      msg_flag_2 = 2;
      number[i] = '\0';
      message[j] = '\0';
      i = 0; j = 0;
    }
    else if (Rec_Data == 0X0D && msg_flg == 8) //Carriage return (end of message)
    {
      clear_rx_buffer();//clearing receiving buffer
      msg_flg = 0;
      delete_flag = 1;
      delay(300);//Delay for GSM module become ready
      Serial1.println("AT+CMGD=1,4");// Command for delete all messages in SIM card
    }
    else if ( Rec_Data == '0' && msg_flg == 0 && delete_flag == 1 ) //Response for delete command ,sucess all messages were deleted
    {
      if ( msg_flag_2 == 2 )
        reply_flag = 1;//If the message have start and stop symbols it must be checked otherwise no need to check the recieved message
      else
        reply_flag = 0;//No need to check recieved message
      msg_flg = 0;
      msg_flag_2 = 0;
      d_count = 0;
      delete_flag = 0;
    }
    else if ( Rec_Data == '2' && msg_flg == 0 ) // '2' is recieved,incoming call
    {
      call_flag = 1;
      delay(300);
      Serial1.println("ATH");//Command for hang up incomming call,all calls must be filtered no need to answer a call
    }
    else if ( Rec_Data == '0' && msg_flg == 0 && call_flag == 1 ) // '0' (zero) is recieved,call sucessfully rejected
    {
      msg_flg = 0;
      call_flag = 0;
      msg_flag_2 = 0;
      d_count = 0;
      reply_flag = 0;
    }
    else if ( (Rec_Data == '3' || Rec_Data == '4' || Rec_Data == '7'  ) && msg_flg == 0 ) //incase of any error,nocarrier and busy
    {
      msg_flg = 0;
      call_flag = 0;
      msg_flag_2 = 0;
      d_count = 0;
      reply_flag = 0;
    }
  }
}
/**********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************

Function Name : ARRAY_CLEAR
Function used to clearing message and number arrays

***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/
void array_clear(void)
{
  byte k = 0;
  for ( k = 0; k < 15; k++)
    number[k] = '\0';
  for ( k = 0; k < 160; k++)
    message[k] = '\0';
}

/**********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************

Function Name : CLEAR_RX_BUFFER
Function used to clear receiveing buffer

***********************************************************************************************************************************************************************************
**********************************************************************************************************************************************************************************/

void clear_rx_buffer(void)
{
  char rec_data = 0;
  while (Serial1.available() > 0)
    rec_data = Serial1.read();
}
